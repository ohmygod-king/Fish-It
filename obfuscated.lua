loadstring((function(b64) local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' local function decode(str) local t={} for i=1,#str do local c=str:sub(i,i) if c~='=' then local idx=b:find(c)-1 t[#t+1]=('%06d'):format(tonumber(idx):tobinary()) end end local bin=table.concat(t) local pad=#bin%8 bin=bin..string.rep('0',8-pad) local r='' for i=1,#bin,8 do r=r..string.char(tonumber(bin:sub(i,i+7),2)) end return r end return decode(b64) end)(""))()
